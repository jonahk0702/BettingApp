{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonah\\\\Desktop\\\\school\\\\BettingApp\\\\src\\\\components\\\\Register\\\\userLoader.js\";\n\nclass UserLoader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.ValidateFirst = () => {\n      let _this$state = this.state,\n          name = _this$state.name,\n          dateOfBirth = _this$state.dateOfBirth,\n          email = _this$state.email;\n\n      if (name === '') {\n        nameStyle += '  invalidbw1';\n        FirstMSG = 'Please note all fields are required';\n      }\n\n      if (dateOfBirth === '') {\n        DateBirthStyle += ' invalid bw1';\n        FirstMSG = 'Please note all fields are required';\n      }\n\n      if (name !== \"\") {\n        nameStyle = \"pa2 input-reset ba bg-transparent hover-bg-black w-100\";\n      }\n\n      if (dateOfBirth !== \"\") {\n        DateBirthStyle = \"pa2 input-reset ba bg-transparent hover-bg-black w-100\";\n      }\n\n      if (email === '') {\n        emailStyles += \" invalid bw1 \";\n      }\n\n      if (!email.includes('.') || !email.includes('@')) {\n        emailStyles += \" invalid bw1 \";\n        emailMessage = \"Please enter a valid email adress\";\n      } else {\n        emailStyles = stylesHolder;\n        emailMessage = \"\";\n      }\n\n      if (name !== \"\" && dateOfBirth !== \"\" && email.includes('.') && email.includes('@')) {\n        currentPage = 2;\n        FirstMSG = '';\n      }\n\n      this.setState({\n        num: 'a'\n      });\n    };\n\n    this.ValidateFinal = () => {\n      let success = true;\n      let _this$state2 = this.state,\n          Country = _this$state2.Country,\n          password = _this$state2.password,\n          passwordConfirm = _this$state2.passwordConfirm,\n          IdNumber = _this$state2.IdNumber,\n          name = _this$state2.name,\n          email = _this$state2.email,\n          dateOfBirth = _this$state2.dateOfBirth,\n          gender = _this$state2.gender;\n\n      if (password === '') {\n        passwordStyle += \" invalid bw1 \";\n        success = false;\n      }\n\n      if (passwordConfirm === '') {\n        passwordStyle += \" invalid bw1 \";\n        success = false;\n      }\n\n      if (IdNumber === '') {\n        idStyles = \" invalid bw1\";\n        idNumberMessage = \"Please enter a valid Idenitifaction Number\";\n        success = false;\n      } else {\n        idStyles = \"\";\n        idNumberMessage = \"\";\n      }\n\n      if (Country === '') {\n        countryStyles = \" invalid bw1 \";\n        success = false;\n      } else {\n        countryStyles = \" black \";\n      }\n\n      if (password.length < 8 || password.toUpperCase() === password || password.toLowerCase() === password || isNaN(parseFloat(password)) && isFinite(password)) {\n        passwordMsg = 'Please chose a valid password. Check below for our password guidlines.';\n        success = false;\n      } else {\n        if (password === passwordConfirm) {\n          passwordMsg = '';\n          passwordStyle = stylesHolder;\n        } else {\n          passwordMsg = 'Please make sure the passwords match';\n          success = false;\n        }\n      }\n\n      this.setState({\n        num: 'a'\n      });\n\n      if (success) {\n        fetch('http://localhost:3000/register', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: email,\n            password: password,\n            Country: Country,\n            name: name,\n            dateOfBirth: dateOfBirth,\n            IdNumber: IdNumber,\n            gender: gender\n          })\n        }).then(response => response.json()).then(user => {\n          if (user) {\n            console.log(user);\n            this.props.display(); //loadUser(user);\n            //window.location.href = \"/Explore\";\n          }\n        });\n      }\n    };\n\n    this.radioChange = e => {\n      this.setState({\n        gender: e.currentTarget.value\n      });\n    };\n\n    this.enterEmail = newEmail => {\n      this.setState({\n        email: newEmail.target.value\n      });\n    };\n\n    this.enterPassword = newPassword => {\n      this.setState({\n        password: newPassword.target.value\n      });\n    };\n\n    this.enterName = name => {\n      this.setState({\n        name: name.target.value\n      });\n    };\n\n    this.enterSurname = secondName => {\n      this.setState({\n        secondName: secondName.target.value\n      });\n      console.log(secondName.target.value);\n    };\n\n    this.enterDateofBirth = dateBirth => {\n      this.setState({\n        dateOfBirth: dateBirth.target.value\n      });\n    };\n\n    this.enterconPassword = ConfirmPassWord => {\n      this.setState({\n        passwordConfirm: ConfirmPassWord.target.value\n      });\n    };\n\n    this.enterIDNum = idNum => {\n      this.setState({\n        IdNumber: idNum.target.value\n      });\n    };\n\n    this.enterUsername = countrys => {\n      this.setState({\n        Country: countrys.target.value\n      });\n    };\n\n    this.state = {\n      Country: '',\n      name: '',\n      dateOfBirth: '',\n      //Time.now,\n      email: '',\n      password: '',\n      passwordConfirm: '',\n      IdNumber: '',\n      num: '',\n      gender: 'Female'\n    };\n  } //This just stores in state the country they are from\n\n\n  selectCountry(val) {\n    this.setState({\n      Country: val\n    });\n    countryHolder = val;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default UserLoader;","map":{"version":3,"sources":["C:\\Users\\Jonah\\Desktop\\school\\BettingApp\\src\\components\\Register\\userLoader.js"],"names":["UserLoader","Component","constructor","props","ValidateFirst","state","name","dateOfBirth","email","nameStyle","FirstMSG","DateBirthStyle","emailStyles","includes","emailMessage","stylesHolder","currentPage","setState","num","ValidateFinal","success","Country","password","passwordConfirm","IdNumber","gender","passwordStyle","idStyles","idNumberMessage","countryStyles","length","toUpperCase","toLowerCase","isNaN","parseFloat","isFinite","passwordMsg","fetch","method","headers","body","JSON","stringify","then","response","json","user","console","log","display","radioChange","e","currentTarget","value","enterEmail","newEmail","target","enterPassword","newPassword","enterName","enterSurname","secondName","enterDateofBirth","dateBirth","enterconPassword","ConfirmPassWord","enterIDNum","idNum","enterUsername","countrys","selectCountry","val","countryHolder","render"],"mappings":"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","sourcesContent":["\r\n  class UserLoader extends Component {\r\n   constructor(props) {\r\n    super(props);\r\n      this.state = {\r\n        Country:'',\r\n        \r\n        name:'',\r\n        dateOfBirth: '',//Time.now,\r\n        email: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n\r\n        IdNumber: '',\r\n        num:'', \r\n        gender: 'Female'\r\n      }\r\n    }\r\n\r\n\r\n//This just stores in state the country they are from\r\n \r\n\r\nValidateFirst = () => {\r\n  let {name, dateOfBirth, email} = this.state;\r\n\r\n  if(name === ''){\r\n    \r\n    \r\n    nameStyle += '  invalidbw1';\r\n    FirstMSG = 'Please note all fields are required';\r\n     \r\n  }\r\n\r\n  if(dateOfBirth === ''){\r\n      DateBirthStyle += ' invalid bw1';\r\n      FirstMSG = 'Please note all fields are required';\r\n     \r\n\r\n  }\r\n  if(name !== \"\"){\r\n    nameStyle = \"pa2 input-reset ba bg-transparent hover-bg-black w-100\";\r\n  }\r\n  if(dateOfBirth !== \"\"){\r\n      DateBirthStyle =\"pa2 input-reset ba bg-transparent hover-bg-black w-100\";\r\n  }\r\n \r\n\r\n  \r\n   if(email === ''){\r\n      emailStyles += \" invalid bw1 \";\r\n    }\r\n\r\n    if(!email.includes('.') || !email.includes('@')){\r\n        emailStyles += \" invalid bw1 \";\r\n        emailMessage = \"Please enter a valid email adress\";\r\n        \r\n    }else{\r\n       emailStyles = stylesHolder;\r\n      emailMessage = \"\";\r\n    }\r\n\r\n    if(name !== \"\" && dateOfBirth !== \"\"\r\n      && email.includes('.') && email.includes('@')){\r\n        currentPage = 2;\r\n        FirstMSG = '';\r\n      }\r\n\r\n\r\n    this.setState({num: 'a'});\r\n\r\n\r\n}\r\n\r\n\r\n\r\nValidateFinal = () => {\r\n  let success = true;\r\n  let {Country, password, passwordConfirm, IdNumber, name, email, dateOfBirth, gender} = this.state;\r\n  \r\n  if(password === ''){\r\n    passwordStyle += \" invalid bw1 \";\r\n    success = false;\r\n  }  \r\n  if(passwordConfirm === ''){\r\n    passwordStyle += \" invalid bw1 \";\r\n    success = false;\r\n  } \r\n\r\n  if(IdNumber === ''){\r\n    idStyles = \" invalid bw1\";\r\n    idNumberMessage = \"Please enter a valid Idenitifaction Number\";\r\n    success = false;\r\n  }else{\r\n    idStyles = \"\";\r\n    idNumberMessage =\"\";\r\n  }\r\n \r\n  \r\n  if(Country === ''){\r\n    countryStyles = \" invalid bw1 \";\r\n    success = false;\r\n  }else{\r\n    countryStyles = \" black \";     \r\n  }\r\n       \r\n  \r\n\r\n\r\n  if (password.length < 8 || password.toUpperCase() === password || password.toLowerCase()\r\n          === password || (isNaN(parseFloat(password)) && isFinite(password))){\r\n          passwordMsg = 'Please chose a valid password. Check below for our password guidlines.';\r\n          success = false;\r\n        }else{\r\n          if(password === passwordConfirm){\r\n            passwordMsg = '';\r\n            passwordStyle = stylesHolder;\r\n           }\r\n           else{\r\n              passwordMsg = 'Please make sure the passwords match';\r\n              success = false;\r\n           }\r\n        }\r\n         this.setState({num: 'a'});\r\n\r\n      if(success){\r\n\r\n        fetch('http://localhost:3000/register', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body:JSON.stringify({\r\n              email:email,\r\n              password: password, \r\n              Country: Country,\r\n              name: name,\r\n              dateOfBirth: dateOfBirth,\r\n              IdNumber: IdNumber,\r\n              gender: gender \r\n          })\r\n        })\r\n   .then(response => response.json())\r\n   .then(user => {\r\n    if(user){\r\n      console.log(user);\r\n     this.props.display();//loadUser(user);\r\n     //window.location.href = \"/Explore\";\r\n    }\r\n   })\r\n      }\r\n  }\r\n        \r\n     \r\nradioChange = (e) =>{\r\n    this.setState({\r\n      gender: e.currentTarget.value\r\n    });\r\n  }\r\n\r\nenterEmail = (newEmail) =>{\r\n      this.setState({email: newEmail.target.value});\r\n\r\n  }\r\n\r\n  enterPassword = (newPassword) =>{\r\n      this.setState({password: newPassword.target.value});\r\n  }\r\n\r\n  \r\n\r\n  enterName = (name) =>{\r\n      this.setState({name: name.target.value});\r\n      \r\n  }\r\n\r\n  enterSurname = (secondName) =>{\r\n      this.setState({secondName: secondName.target.value});\r\n      console.log(secondName.target.value);\r\n    }\r\n\r\n  enterDateofBirth = (dateBirth) =>{\r\n      this.setState({dateOfBirth: dateBirth.target.value});\r\n  }\r\n\r\n  enterconPassword = (ConfirmPassWord) =>{\r\n      this.setState({passwordConfirm: ConfirmPassWord.target.value});\r\n  }\r\n   selectCountry (val) {\r\n    \r\n    this.setState({ Country: val });\r\n    countryHolder = val;\r\n  }\r\n\r\n  enterIDNum = (idNum) =>{\r\n      this.setState({IdNumber:idNum.target.value});      \r\n  }\r\n\r\n  enterUsername = (countrys) =>{\r\n      this.setState({Country: countrys.target.value});\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n\r\n\r\n      <div>\r\n        \r\n \r\n\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default UserLoader;\r\n"]},"metadata":{},"sourceType":"module"}